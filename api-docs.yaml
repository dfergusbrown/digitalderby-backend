openapi: 3.0.0
info:
  title: Digital Derby
  version: 0.0.0
components:
  schemas:
    bet:
      name: Bet
      description: A bet placed on a certain game and a certain horse
      type: object
      properties:
        gameId:
          type: string
        horseId:
          type: string
        betValue:
          type: integer
        returns:
          type: integer
    userProfile:
      name: User Profile
      description: A user, their current wallet balance, and their past betting history
      type: object
      properties:
        username:
          type: string
        profile:
          type: object
          properties:
            wallet:
              type: integer
            betLog:
              type: array
              items:
                $ref: '#/components/schemas/bet'
    horseProfile:
      name: HorseProfile
      description: A horse and their stats
      type: object
      properties:
        name:
          type: string
        icons:
          type: array
          items:
            type: string
        color:
          type: string
        stats:
          type: object
  parameters:
    username:
      name: Username
      in: path
      description: Username
      type: string
    horseId:
      name: Horse ID
      in: path
      description: Slug to identify a certain horse
      type: string
    adminToken:
      name: Admin Token
      description: JWT obtained when a user logs in as the user 'admin'.
      in: header
      required: true
      schema:
        type: string 
        example:
          Bearer <adminToken>
    userToken:
      name: User Token
      description: JWT to authorize a client as a specific user.
      in: header
      required: true
      schema:
        type: string 
        example:
          Bearer <adminToken>
tags:
  - name: Admin Tools
    description: Tools for managing the operation of the server
  - name: Authentication
    description: Endpoints for signing up and logging in
  - name: Horse Data
    description: Endpoints for accessing historical horse data
  - name: Race Data
    description: Endpoints for accessing historical race data
  - name: User Data
    description: Endpoints for accessing user information
paths:
  /admin/serverStatus:
    get:
      summary: Get current server status
      tags: [Admin Tools]
  /admin/newHorses:
    post:
      summary: Generate a new population of horses
      tags: [Admin Tools]
      parameters:
        - $ref: '#/components/parameters/adminToken'
  /admin/openServer:
    post:
      summary: Creates a new Socket.IO server and disconnects all old clients
      tags: [Admin Tools]
      parameters:
        - $ref: '#/components/parameters/adminToken'
  /admin/closeServer:
    post:
      summary: Closes the Socket.IO server
      tags: [Admin Tools]
      parameters:
        - $ref: '#/components/parameters/adminToken'
  /auth/login:
    post:
      summary: Log in as a user
      tags: [Authentication]
  /auth/signup:
    post:
      summary: Sign up for a new account
      tags: [Authentication]
  /auth/deleteAccount:
    delete:
      summary: Delete the user's account
      tags: [Authentication]
  /horses:
    get:
      summary: Get all historical horse data
      tags: [Horse Data]
  /horses/{id}:
    get:
      summary: Get a specific horse by name
      tags: [Horse Data]
      parameters:
        - $ref: '#/components/parameters/horseId'
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/horseProfile'
        "404":
          description: 'Not found'
  /horses/{id}/lastGames:
    get:
      summary: Get the horse's previous games played
      tags: [Horse Data]
      parameters:
        - $ref: '#/components/parameters/horseId'
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/horseProfile'
        "404":
          description: 'Not found'
  /races:
    get:
      summary: Get all historical race data
      tags: [Race Data]
  /races/lastGame:
    get:
      summary: Get the game log for the most recent game
      tags: [Race Data]
  /races/{id}:
    get:
      summary: Get a specific game by id
      tags: [Race Data]
  /races/{id}/horses:
    get:
      summary: Get all the details for all the horses in a specific race
      tags: [Race Data]
  /users:
    get:
      summary: Get all registered users' username
      tags: [User Data]
  /users/{username}:
    get:
      summary: Get a specific user profile by id
      tags: [User Data]
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userProfile'
        "404":
          description: 'Not found'
    delete:
      summary: Delete a user's account
      tags: [User Data]
      parameters:
        - $ref: '$/components/parameters/adminToken'
      responses:
        "200":
          description: 'OK'
        "401":
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: string
                example:
                  message: 'Must be logged in as the admin to perform this action'
